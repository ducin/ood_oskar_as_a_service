{
  "version": "1",
  "metadata": {
    "marimo_version": "0.17.4"
  },
  "cells": [
    {
      "id": "khpA",
      "code_hash": "888d0a54bbf6c0b5d80e233dfbcda84b",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "lVyE",
      "code_hash": "4958c0d652db503b648342d105e03119",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "QcwL",
      "code_hash": "11065146590a8baacba132ef353963b5",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<pre style='font-size: 12px'>PosixPath(&#x27;prompts/emmet_sourcing.json&#x27;)</pre>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "CENb",
      "code_hash": "ce846b44b12d9792f5391f8d26d09a1d",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stderr",
          "text": "/var/folders/93/h8wmgzrn0s51yfdr0pr2r0wm0000gn/T/marimo_16984/__marimo__cell_CENb_.py:1: PydanticDeprecatedSince20: The `parse_file` method is deprecated; load the data from file, then if your data is JSON use `model_validate_json`, otherwise `model_validate` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n  prompt_file = PromptsFile.parse_file(sourcing_path)\n",
          "mimetype": "text/plain"
        }
      ]
    },
    {
      "id": "lShL",
      "code_hash": "0e2c1f74db9db085b760b460b4a96eca",
      "outputs": [
        {
          "type": "data",
          "data": {
            "application/json": "[\"text/plain:title='Generate CQRS' content='You are an CQRS expert with the deep knowlegde about event sourcing.  \\\\nGenerate in Typescript example of code which should contains command, command handler and event.  \\\\nOnly generate code! \\\\n Generate only short code'\"]"
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "e981ffbe59b4cfdf7ad17ae2352e4743",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stderr",
          "text": "Device set to use mps:0\n",
          "mimetype": "text/plain"
        }
      ]
    },
    {
      "id": "dkyd",
      "code_hash": "b4a88417b3d0170d754c647c30b7216a",
      "outputs": [
        {
          "type": "data",
          "data": {
            "application/json": "[{\"generated_text\": [{\"role\": \"user\", \"content\": \"You are an CQRS expert with the deep knowlegde about event sourcing.  \\nGenerate in Typescript example of code which should contains command, command handler and event.  \\nOnly generate code! \\n Generate only short code\"}, {\"role\": \"assistant\", \"content\": \"```typescript\\n// Command\\nclass CreateOrderCommand {\\n  constructor(public orderId: number, public customerId: number) {}\\n}\\n\\n// Command Handler\\nclass CreateOrderCommandHandler {\\n  handle(command: CreateOrderCommand): void {\\n    // Logic to create order\\n    console.log(`Creating order ${command.orderId} for customer ${command.customerId}`);\\n  }\\n}\\n\\n// Event\\nclass OrderCreatedEvent {\\n  constructor(public orderId: number, public customerId: number) {}\\n}\\n\\n// Event Publisher\\nclass EventPublisher {\\n  publish(event: any): void {\\n    console.log(`Publishing event: ${event.constructor.name}`);\\n  }\\n}\\n```\\n\\nIn this example:\\n- `CreateOrderCommand` is the command class.\\n- `CreateOrderCommandHandler` handles the creation of orders.\\n- `OrderCreatedEvent` represents the event that occurs when an order is created.\\n- `EventPublisher` publishes events.\\n\\nThe command handler calls the event publisher to notify subscribers (e.g., UI components) about the event.\"}]}]"
          }
        }
      ],
      "console": []
    },
    {
      "id": "EYXa",
      "code_hash": "a63458e217110f85e67ff717870a4e47",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "nmAj",
      "code_hash": "cbeb6a2a474e731591e59e2dded1d1eb",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    }
  ]
}