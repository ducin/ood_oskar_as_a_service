```typescript
// Command
class CreateOrderCommand {
  constructor(public orderId: number, public customerId: number) {}
}

// Command Handler
class CreateOrderCommandHandler {
  handle(command: CreateOrderCommand): void {
    // Logic to create order
    console.log(`Creating order ${command.orderId} for customer ${command.customerId}`);
  }
}

// Event
class OrderCreatedEvent {
  constructor(public orderId: number, public customerId: number) {}
}

// Event Publisher
class EventPublisher {
  publish(event: any): void {
    console.log(`Publishing event: ${event.constructor.name}`);
  }
}
```

In this example:
- `CreateOrderCommand` is the command class.
- `CreateOrderCommandHandler` handles the creation of orders.
- `OrderCreatedEvent` represents the event that occurs when an order is created.
- `EventPublisher` publishes events.

The command handler calls the event publisher to notify subscribers (e.g., UI components) about the event.